#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
This module requires:
  * python3-daemon python3-pil python3-aiofiles python3-aiohttp
    python3-magic

Module croniter requires:
  * python3-natsort python3-dateutil
"""

import bot_commands
import croniter

import aiofiles.os
import asyncio
import daemon
import daemon.pidfile
import datetime
import json
import logging
import magic
import os
import signal
import sys
import threading
import time
from aiohttp import ClientConnectionError, ServerDisconnectedError
from nio import (
    AsyncClient,
    InviteEvent,
    InviteNameEvent,
    InviteMemberEvent,
    LoginResponse,
    MatrixRoom,
    RoomForgetResponse,
    RoomLeaveResponse,
    RoomMessageText,
    SendRetryError,
    SyncResponse,
    UploadResponse
)
from nio.exceptions import LocalProtocolError
from PIL import Image

__author__ = "Niccolo Rigacci"
__copyright__ = "Copyright 2020 Niccolo Rigacci <niccolo@rigacci.org>"
__license__ = "GPLv3-or-later"
__email__ = "niccolo@rigacci.org"
__version__ = "0.0.1"

# Default JSON configuration file.
CONFIG_FILE_DEFAULT = '/etc/matrix-personal-bo.cfg'
# Config defaults.
CONFIG_DEFAULTS = {
    "HOMESERVER": "https://matrix.org",
    "BOT_USER_ID": "@test-bot:matrix.org",
    "BOT_DEVICEID": "nio-host",
    "BOT_PASSWORD": "MySecret",
    "COMMAND_PREFIX": "!",
    "BE_DAEMON": True,
    "PID_FILE": 'matrix-personal-bot.pid',
    "LOG_FILE": 'matrix-personal-bot.log',
    "LOG_FORMAT": '%(asctime)s %(levelname)s %(message)s',
    "LOG_LEVEL": 'DEBUG',
    "MAIN_LOOP_INTERRUPT_MSEC": 5000,
    "RETRY_SEC": 15,
    "CRONTAB": { "cleanup": "* * * * */10" }
}
# MIME types accepted by send_file_to_room().
ALLOWED_FILE_MIME = (
    'application/pdf',
    'application/zip'
)
ALLOWED_IMAGE_MIME = (
    'image/jpeg',
    'image/png',
    'image/gif'
)

# Basic bot template using matrix-nio:
# https://github.com/anoadragon453/nio-template

# See basic and advanced examples at:
# https://matrix-nio.readthedocs.io/en/latest/examples.html

# matrix-nio API doc:
# https://matrix-nio.readthedocs.io/en/latest/nio.html

# asyncio - Asynchronous I/O doc:
# https://docs.python.org/3.7/library/asyncio.html

class Cronjob:
    def __init__(self, cron_format, start_time=None):
        if start_time is None:
            start_time = datetime.datetime.now()
        self.cron_format = cron_format
        self.croniter = croniter.croniter(cron_format, start_time)
        self.next = self.croniter.get_next(datetime.datetime)


class MyMatrixClient(AsyncClient):

    def __init__(self, homeserver, user='', device_id='', ssl=None,
            proxy=None):

        # Call the __init__ method defined in AsyncClient.
        super().__init__(homeserver, user=user, device_id=device_id,
            ssl=ssl, proxy=proxy)
        # Flag to save an eventually received signals.
        self.signal = None
        # Handle the syncs with the server, fired by sync_forever(timeout).
        self.add_response_callback(self.cb_sync, SyncResponse)
        # Auto-join room invites.
        self.add_event_callback(self.cb_autojoin_room, InviteEvent)
        # Enable the callback for received messages.
        self.add_event_callback(self.cb_handle_messages, RoomMessageText)
        # Start listening to messages only afer the first sync().
        self.ignore_messages = True
        # Prepare the command parser.
        self.cmd_parser = bot_commands.CommandParser


    class ClientException(Exception):
        """ Custom exception raised to exit from sync_forever() """
        pass


    async def cb_sync(self, response):
        """ Callback activated on server sync or sync_forever() timeout """
        logging.debug(f"Synced with homeserver, token: {response.next_batch}")
        # React to signal received.
        if self.signal is not None:
            if self.signal in (signal.SIGUSR1, signal.SIGUSR2):
                await self.cmd_parser.process(self, None, 'sigusr')
                self.signal = None
            else:
                signum = self.signal
                self.signal = None
                raise self.ClientException(signum)
        # Crontab execution.
        time_now = datetime.datetime.now()
        for job in self.crontab:
            cronjob = self.crontab[job]
            if time_now >= cronjob.next:
                cronjob.next = cronjob.croniter.get_next(datetime.datetime)
                logging.info(f'Cron "{job}" "{cronjob.cron_format}", next schedule: {cronjob.next}')
                if job == 'cleanup':
                    await self.cleanup()
                elif job.startswith('cmd_'):
                    cmd = job[4:]
                    await self.cmd_parser.process(self, None, cmd)


    async def cb_autojoin_room(self, room: MatrixRoom, event: InviteEvent):
        """ Callback to automatically join a room on invite """
        # Called three times when invited into a room:
        #   1) InviteNameEvent: event.name = 'Room name'
        #   2) InviteMemberEvent: event.content = {'membership': 'join', ...}
        #      The join of room's owner.
        #   3) InviteMemberEvent: event.content = {'membership': 'invite', ...}
        #      The invite to ourself.
        if type(event) == InviteNameEvent:
            logging.debug(f'InviteNameEvent: event.name: "{event.name}"')
        elif type(event) == InviteMemberEvent:
            logging.debug('InviteMemberEvent: event.content: %s' % (event.content,))
            if event.content['membership'] == 'invite':
                logging.debug(f'Auto-joining room "{room.name}"')
                await self.join(room.room_id)
                logging.info(f'Joined room "{room.name}" ({room.room_id}), encryption is: {room.encrypted}')
                await self.send_text_to_room(room.room_id, "Hello, World!")


    async def cb_handle_messages(self, room: MatrixRoom,
            event: RoomMessageText):
        """ Callback to process received messages """
        if self.ignore_messages:
            return
        logging.debug(f'Message in room "{room.display_name}" (encr:{event.decrypted}) from "{room.user_name(event.sender)}": {event.body}')
        if event.body.startswith(cfg["COMMAND_PREFIX"]):
            command = event.body[len(cfg["COMMAND_PREFIX"]):]
            await self.cmd_parser.process(self, room, command)
        elif event.sender != cfg["BOT_USER_ID"]:
            await self.send_text_to_room(room.room_id, 'Message received')


    async def cleanup(self):
        """ Do periodic clean-up, e.g. leaving empty rooms """
        # Don't trust self.rooms, it may contains already leaved rooms.
        my_joined = await self.joined_rooms()
        for room_id in my_joined.rooms:
            if room_id in self.rooms:
                member_count = self.rooms[room_id].member_count
                if member_count < 2:
                    logging.info(f'Leaving room {room_id} because member_count is {member_count}')
                    resp = await self.room_leave(room_id=room_id)
                    if isinstance(resp, RoomLeaveResponse):
                        logging.debug('Room leaved')
                    else:
                        logging.error(f'Leaving room: {resp}')
                    resp = await self.room_forget(room_id=room_id)
                    if isinstance(resp, RoomForgetResponse):
                        logging.debug(f'Room forgotten')
                    else:
                        logging.error(f'Forgetting room: {resp}')


    async def send_text_to_room(self, room_id, body):
        """ Send a message into a room """
        await self.room_send(
            room_id=room_id,
            message_type="m.room.message",
            content={
                "msgtype": "m.text",
                "body": body
            }
        )


    async def send_file_to_room(self, room_id, filename):
        """ Upload a file to server and send a message into the room """
        mime_type = magic.from_file(filename, mime=True)
        if mime_type in ALLOWED_IMAGE_MIME:
            msgtype = "m.image"
        elif mime_type in ALLOWED_FILE_MIME:
            msgtype = "m.file"
        else:
            logging.error(f'Failed sending file "{filename}", mime type is {mime_type}')
            return
        file_stat = await aiofiles.os.stat(filename)
        async with aiofiles.open(filename, "r+b") as f:
            resp, maybe_keys = await self.upload(
                f,
                content_type=mime_type,
                filename=os.path.basename(filename),
                filesize=file_stat.st_size
            )
        if (isinstance(resp, UploadResponse)):
            logging.debug(f'File "{filename}" was uploaded to server.')
        else:
            logging.error(f'Failed to upload file "{filename}". Response: {resp}')
            return
        content = {
            "body": os.path.basename(filename),
            "info": {
                "size": file_stat.st_size,
                "mimetype": mime_type,
                "thumbnail_info": None,
                "thumbnail_url": None,
            },
            "msgtype": msgtype,
            "url": resp.content_uri,
        }
        if msgtype == "m.image":
            (width, height) = Image.open(filename).size
            content["info"]["w"] = width
            content["info"]["h"] = height
        await self.room_send(
            room_id,
            message_type="m.room.message",
            content=content
        )
        logging.info(f'File "{filename}" sent to room {room_id}')


    async def send_text_broadcast(self, body):
        """ Send a message to all rooms we are in """
        my_joined = await self.joined_rooms()
        for room_id in my_joined.rooms:
            await self.send_text_to_room(room_id, body)


    async def send_file_broadcast(self, filename):
        """ Send a file to all rooms we are in """
        my_joined = await self.joined_rooms()
        for room_id in my_joined.rooms:
            await self.send_file_to_room(room_id, filename)


    def signal_handler(self, signum):
        """ Callback executed on signal received """
        # NOTE: Cannot "async def" this handler: coroutines cannot be used
        # with add_signal_handler().
        # Cannot raise "ERROR Exception in callback" (this handler is a
        # callback).
        # Cannot use "await self.method()" because this handler is not
        # "async def".
        logging.info('signal_handler(%s)' % (signum,))
        self.signal = signum


def reload_config_file(running_cfg, config_file):
    """ Reload the configuration file """
    if os.path.isfile(config_file):
        logging.info(f'Reloading configuration file "{config_file}"')
        cfg = CONFIG_DEFAULTS
        try:
            with open(config_file, 'r') as f:
                cfg.update(json.load(f))
        except Exception as e:
            logging.error(f'Config file error: %s' % (type(e),))
            cfg = running_cfg
        return cfg


async def main(loop, cfg, config_file):
    """ Initialize the Matrix bot and start the main loop """
    # Set the required logging.
    logger = logging.getLogger()
    logger.setLevel(getattr(logging, cfg["LOG_LEVEL"]))
    if cfg["BE_DAEMON"]:
        log_handler = logging.FileHandler(filename=cfg["LOG_FILE"])
    else:
        log_handler = logging.StreamHandler(stream=sys.stdout)
    log_handler.setFormatter(logging.Formatter(cfg["LOG_FORMAT"]))
    logger.addHandler(log_handler)
    # Create the client object and set the signal handlers.
    client = MyMatrixClient(cfg["HOMESERVER"], user=cfg["BOT_USER_ID"],
        device_id=cfg["BOT_DEVICEID"])
    for signum in (signal.SIGHUP, signal.SIGINT, signal.SIGQUIT,
            signal.SIGTERM, signal.SIGUSR1, signal.SIGUSR2):
        loop.add_signal_handler(signum, client.signal_handler, signum)
    redo_login = True
    # Main loop: login and sync messages with homeserver, handle exceptions.
    while True:
        if not client.logged_in:
            client.ignore_messages = True
            # Parse crontabs from configuration file.
            client.crontab = {}
            for job in cfg["CRONTAB"]:
                client.crontab[job] = Cronjob(cfg["CRONTAB"][job])
            logging.info('Prepared crontab with %d jobs' % (len(client.crontab),))
            # Try to login to homeserver.
            try:
                resp = await client.login(cfg["BOT_PASSWORD"])
                if isinstance(resp, LoginResponse):
                    logging.info('Logged-in')
                    redo_login = False
                else:
                    logging.error(f'Failed to login: {resp}')
            except Exception as e:
                logging.error('Unexpected Exception at login: %s' % (type(e),))

        if client.logged_in:
            # Do the first sync() and announce ourself in all the joined rooms.
            try:
                await client.sync(full_state=True)
                my_joined = await client.joined_rooms()
                logging.info('Sending hello in rooms: %s' % (my_joined.rooms,))
                await client.send_text_broadcast("Hello! I'm on-line again.")
            except Exception as e:
                logging.error('Exception in first sync and self-announce: %s' % (type(e),))
            # Start the sync_forever(), which returns only for exceptions.
            client.ignore_messages = False
            try:
                await client.sync_forever(
                    timeout=cfg["MAIN_LOOP_INTERRUPT_MSEC"],
                    full_state=True)
            except (SendRetryError):
                logging.error('Unable to send message to homeserver')
            except (ClientConnectionError, ServerDisconnectedError):
                logging.error('Unable to connect to homeserver')
                redo_login = True
            except client.ClientException as e:
                logging.warning('ClientException: %s' % (str(e),))
                if e.args[0] in (signal.SIGINT, signal.SIGQUIT,
                        signal.SIGTERM):
                    break  # Terminate the main loop.
                elif e.args[0] in (signal.SIGHUP,):
                    cfg = reload_config_file(cfg, config_file)
                    logger.setLevel(getattr(logging, cfg["LOG_LEVEL"]))
                    redo_login = True
            except Exception as e:
                logging.error('Unexpected Exception in sync_forever(): %s' % (type(e),))
                redo_login = True

        # Catch severe signals even if sync_forever() was not run.
        if client.signal in (signal.SIGINT, signal.SIGQUIT, signal.SIGTERM):
            break  # Terminate the main loop.

        if redo_login:
            logging.info('Close client and retry in %s sec' % (cfg["RETRY_SEC"],))
            try:
                await client.logout(all_devices=True)
                await client.close()
            except:
                pass
            time.sleep(cfg["RETRY_SEC"])

    # Main loop exit: terminate program.
    logging.debug(f'Exiting main loop: client logout() and close()')
    if client.logged_in:
        try:
            await client.logout(all_devices=True)
        except:
            pass
    try:
        await client.close()
    except:
        pass


if __name__ == '__main__':
    """ Read the configuration file and launch the main loop """
    cfg = CONFIG_DEFAULTS
    if len(sys.argv) > 1:
        config_file = sys.argv[1]
    else:
        config_file = CONFIG_FILE_DEFAULT
    if os.path.isfile(config_file):
        print(f'Reading configuration file "{config_file}"')
        with open(config_file, 'r') as f:
            cfg.update(json.load(f))
    if cfg["BE_DAEMON"]:
        # Run in background, if required.
        print('Running in background')
        context = daemon.DaemonContext(
            working_directory = '/tmp',
            umask = 0o002,
            pidfile = daemon.pidfile.PIDLockFile(cfg["PID_FILE"]),
        )
        with context:
            loop = asyncio.get_event_loop()
            loop.run_until_complete(main(loop, cfg, config_file))
    else:
        # Run in foreground.
        loop = asyncio.get_event_loop()
        loop.run_until_complete(main(loop, cfg, config_file))
